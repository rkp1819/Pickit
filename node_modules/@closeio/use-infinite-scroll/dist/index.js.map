{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import { useRef, useState, useLayoutEffect } from 'react';\n\n/**\n * An infinite scroller based on effects.\n * Every time the loader is `N`px to be shown, switch to a new page, load new items.\n *\n * @example\n * const [items, setItems] = useState([]);\n * const [hasMore, setHasMore] = useState(false);\n * const [page, loaderRef, scrollerRef] = useInfiniteScroll({ hasMore });\n *\n * useFetchEffect(async ({ signal }) => {\n *   const data = await myApiCall({ page }, { signal });\n *   setHasMore(data.hasMore);\n *   setItems(prev => [...prev, data.items]);\n * }, [page])\n *\n * return (\n *   <div ref={scrollerRef}>\n *     {items.map(item => <div key={item.id}>{item.name}</div>)}\n *     {hasMore && <div ref={loaderRef}>Loadingâ€¦</div>}\n *   </div>\n * );\n * @param {Object} [options={}]\n * @param {boolean} options.hasMore The observer will disconnect when there are no more items to load.\n * @param {boolean} [options.reset=false] Pass true when you're re-fetching the list and want to resets the scroller to page 0.\n * @param {number} [options.distance=250] When scrolling, the distance in pixels from the bottom to switch the page.\n */\nexport default function useInfiniteScroll({\n  hasMore,\n  reset = false,\n  distance = 250,\n}) {\n  const scrollContainerRef = useRef();\n  const loaderRef = useRef();\n  const [page, setPage] = useState(0);\n\n  if (reset && page !== 0) {\n    setPage(0);\n  }\n\n  useLayoutEffect(() => {\n    const loaderNode = loaderRef.current;\n    const scrollContainerNode = scrollContainerRef.current;\n    if (!scrollContainerNode || !loaderNode || !hasMore) return;\n\n    const options = {\n      root: scrollContainerNode,\n      rootMargin: `0px 0px ${distance}px 0px`,\n    };\n\n    let previousY;\n    let previousRatio = 0;\n\n    const listener = entries => {\n      entries.forEach(\n        ({ isIntersecting, intersectionRatio, boundingClientRect = {} }) => {\n          const { y } = boundingClientRect;\n          if (\n            isIntersecting &&\n            intersectionRatio >= previousRatio &&\n            (!previousY || y < previousY)\n          ) {\n            setPage(page => page + 1);\n          }\n          previousY = y;\n          previousRatio = intersectionRatio;\n        },\n      );\n    };\n\n    const observer = new IntersectionObserver(listener, options);\n    observer.observe(loaderNode);\n\n    return () => observer.disconnect();\n  }, [hasMore, distance]);\n\n  return [page, loaderRef, scrollContainerRef];\n}\n"],"names":["useInfiniteScroll","hasMore","reset","distance","scrollContainerRef","useRef","loaderRef","useState","page","setPage","useLayoutEffect","loaderNode","current","scrollContainerNode","options","root","rootMargin","previousY","previousRatio","listener","entries","forEach","isIntersecting","intersectionRatio","boundingClientRect","y","observer","IntersectionObserver","observe","disconnect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0Be,SAASA,iBAAT,OAIZ;AAAA,MAHDC,OAGC,QAHDA,OAGC;AAAA,wBAFDC,KAEC;AAAA,MAFDA,KAEC,2BAFO,KAEP;AAAA,2BADDC,QACC;AAAA,MADDA,QACC,8BADU,GACV;AACD,MAAMC,kBAAkB,GAAGC,YAAM,EAAjC;AACA,MAAMC,SAAS,GAAGD,YAAM,EAAxB;;AAFC,kBAGuBE,cAAQ,CAAC,CAAD,CAH/B;AAAA;AAAA,MAGMC,IAHN;AAAA,MAGYC,OAHZ;;AAKD,MAAIP,KAAK,IAAIM,IAAI,KAAK,CAAtB,EAAyB;AACvBC,IAAAA,OAAO,CAAC,CAAD,CAAP;AACD;;AAEDC,EAAAA,qBAAe,CAAC,YAAM;AACpB,QAAMC,UAAU,GAAGL,SAAS,CAACM,OAA7B;AACA,QAAMC,mBAAmB,GAAGT,kBAAkB,CAACQ,OAA/C;AACA,QAAI,CAACC,mBAAD,IAAwB,CAACF,UAAzB,IAAuC,CAACV,OAA5C,EAAqD;AAErD,QAAMa,OAAO,GAAG;AACdC,MAAAA,IAAI,EAAEF,mBADQ;AAEdG,MAAAA,UAAU,oBAAab,QAAb;AAFI,KAAhB;AAKA,QAAIc,SAAJ;AACA,QAAIC,aAAa,GAAG,CAApB;;AAEA,QAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,OAAO,EAAI;AAC1BA,MAAAA,OAAO,CAACC,OAAR,CACE,iBAAoE;AAAA,YAAjEC,cAAiE,SAAjEA,cAAiE;AAAA,YAAjDC,iBAAiD,SAAjDA,iBAAiD;AAAA,0CAA9BC,kBAA8B;AAAA,YAA9BA,kBAA8B,sCAAT,EAAS;AAAA,YAC1DC,CAD0D,GACpDD,kBADoD,CAC1DC,CAD0D;;AAElE,YACEH,cAAc,IACdC,iBAAiB,IAAIL,aADrB,KAEC,CAACD,SAAD,IAAcQ,CAAC,GAAGR,SAFnB,CADF,EAIE;AACAR,UAAAA,OAAO,CAAC,UAAAD,IAAI;AAAA,mBAAIA,IAAI,GAAG,CAAX;AAAA,WAAL,CAAP;AACD;;AACDS,QAAAA,SAAS,GAAGQ,CAAZ;AACAP,QAAAA,aAAa,GAAGK,iBAAhB;AACD,OAZH;AAcD,KAfD;;AAiBA,QAAMG,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBR,QAAzB,EAAmCL,OAAnC,CAAjB;AACAY,IAAAA,QAAQ,CAACE,OAAT,CAAiBjB,UAAjB;AAEA,WAAO;AAAA,aAAMe,QAAQ,CAACG,UAAT,EAAN;AAAA,KAAP;AACD,GAlCc,EAkCZ,CAAC5B,OAAD,EAAUE,QAAV,CAlCY,CAAf;AAoCA,SAAO,CAACK,IAAD,EAAOF,SAAP,EAAkBF,kBAAlB,CAAP;AACD;;;;"}